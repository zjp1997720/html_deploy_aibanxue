name: CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
      WORKDIR: /root/html_deploy_aibanxue

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run lint/tests (skip if none)
        run: |
          npm -v
          node -v
          echo "✅ Environment check complete"

      - name: Archive project files (git archive, exclude untracked)
        run: |
          git status --porcelain
          git archive --format=tar.gz -o release.tar.gz HEAD
          ls -lh release.tar.gz

      - name: Copy files to server via sshpass+scp
        run: |
          sudo apt-get update && sudo apt-get install -y sshpass
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no release.tar.gz $SERVER_USER@$SERVER_HOST:/tmp/release.tar.gz

      - name: Remote deploy via SSH (PM2)
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << 'EOF'
          set -e
          WORKDIR="/root/html_deploy_aibanxue"
          mkdir -p "$WORKDIR"
          cd "$WORKDIR"
          
          # 备份当前.env文件
          if [ -f .env ]; then
            cp .env .env.backup
            echo "✅ Backed up .env file"
          fi
          
          # 解压新代码（git archive仅包含受管文件，.env不会被覆盖）
          tar -xzf /tmp/release.tar.gz -C "$WORKDIR"
          echo "✅ Extracted new code"
          
          # 恢复.env文件
          if [ -f .env.backup ]; then
            mv .env.backup .env
            echo "✅ Restored .env file"
          fi
          
          # 安装/更新依赖
          npm install --production
          echo "✅ Updated dependencies"
          
          # 使用PM2进行零停机重启
          pm2 reload html-go || pm2 restart html-go
          echo "✅ Reloaded PM2 service"
          
          # 清理临时文件
          rm -f /tmp/release.tar.gz .env.backup
          EOF

      - name: Verify service health
        run: |
          sleep 3
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
          echo '=== PM2 Status ==='
          pm2 status html-go
          echo '=== Service Health Check ==='
          curl -fsS http://127.0.0.1:8888/ || echo 'Health check failed - service may still be starting'
          echo '=== Deployment Complete ==='" 